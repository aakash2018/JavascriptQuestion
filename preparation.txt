// Trapping Rain Water
// Inversion of Array
// Majority Element
// Delete a Node in Linked List in O(1)
// Median of Two Sorted Arrays
// Aggressive Cows
// LRU Cache & LFU Cache
// Check for Child Sum Property
// BFS & DFS
// Topological Sort
// Dijkstra‚Äôs Algorithm
// Knapsack DP
// Rod Cutting
// Trie Insertion, Deletion


//github link. Important  topics ->https://github.com/bittu1040/JavaScript-Coding-and-Notes/blob/master/JS-Topics/web-worker.js
//Recently, I gave multiple interviews for Senior React.js & Tech Lead roles ‚Äî here are the Top 10 most common questions I was asked.
//  These are basic-level but frequently asked in interviews üëá

// 1Ô∏è‚É£ Call, Apply, and Bind
//  Difference between them + write a polyfill.

// 2Ô∏è‚É£ Flatten Array (No Array.flat)
//  Input : [1,2,3,[4,5,6,[7,8,[10,11]]],9] 
//  Output: [1,2,3,4,5,6,7,8,10,11,9]

// 3Ô∏è‚É£ Inline 5 divs in a row without flex/margin/padding
//  (Hint: display: inline-block)

// 4Ô∏è‚É£ Find sum of numbers without for loop
//  Input: [1,2,3,4,5] ‚Äî (Hint: reduce() or recursion)

// 5Ô∏è‚É£ Deep Copy vs Shallow Copy (How to achieve this)
//  const a = { ab: { cd: { ef: true } } };
//  const b = a; const c = { ...a };
//  console.log(a === b); console.log(a === c);
//  a.ab.cd.ef = false;
//  console.log(b.ab.cd.ef); console.log(c.ab.cd.ef); 

// 6Ô∏è‚É£ Promise & Async/Await Output (More questions I will be posting later) 
//  async function chart(v){ 
//  console.log("start", v); 
//  await console.log("middle", v); 
//  console.log("end", v);
//  }
//  chart("first"); 
//  chart("second");

// 7Ô∏è‚É£ Find first repeating character
//  Example: "success" ‚Üí c

// 8Ô∏è‚É£ Implement a Stopwatch
//  Start, Stop, Reset + live display.

// 9Ô∏è‚É£ Build a To-Do List (Vanilla JS or React)
//  Follow-up: How would you optimize re-renders?

// üîü Currying Function for Infinite Sum.
//  sum(10)(20)(30)() Output => 60
//  sum(10)(20)(30)(40)(50)(60)() Output => 210

// üí° I‚Äôll be posting more such questions soon. 
// Link for next post (More questions): https://lnkd.in/gVfm5yqa

// hashtag#ReactJS hashtag#JavaScript hashtag#WebDevelopment hashtag#InterviewPrep hashtag#CareerGrowth2025

// In a Javascript L1 & L2 round the following questions can be asked from interviewer.

// 1. What is the difference between 'Pass by Value' and 'Pass by Reference'?
// 2. What is the difference between map and filter ?
// 3. What is the difference between map() and forEach() 
// 4. What is the difference between Pure and Impure functions?
// 5. What is the difference between for-in and for-of ?
// 6. What are the differences between call(), apply() and bind() ?
// 7. List out some key features of ES6 ?
// 8. What‚Äôs the spread operator in javascript ?
// 9. What is rest operator in javascript ?
// 10. What are DRY, KISS, YAGNI, SOLID Principles ?
// 11. What is temporal dead zone ?
// 12. Different ways to create object in javascript ?
// 13. Whats the difference between Object.keys,values and entries
// 14. Whats the difference between Object.freeze() vs Object.seal()
// 15. What is a polyfill in javascript ?
// 16. What is generator function in javascript ?
// 17. What is prototype in javascript ?
// 18. What is IIFE ?
// 19. What is CORS ?
// 20. What are the different datatypes in javascript ?
// 21. What are the difference between typescript and javascript ?
// 22. What is authentication vs authorization ?
// 23. Difference between null and undefined ?
// 24. What is the output of 3+2+‚Äù7‚Äù ?
// 25. Slice vs Splice in javascript ?
// 26. What is destructuring ?
// 27. What is setTimeOut in javascript ?
// 28. What is setInterval in javascript ?
// 29. What are Promises in javascript ?
// 30. What is a callstack in javascript ?
// 31. What is a closure ?
// 32. What are callbacks in javascript ?
// 33. What are Higher Order Functions in javascript ?
// 34. What is the difference between == and === in javascript ?
// 35. Is javascript a dynamically typed language or a statically typed language 
// 36. What is the difference between Indexeddb and sessionstorage ?
// 37. What are Interceptors ?
// 38. What is Hoisting ?
// 39. What are the differences let, var and const ?
// 41. Differences between Promise.all, allSettled, any, race ?
// 42. What are limitations of arrow functions?
// 43. What is difference between find vs findIndex ?
// 44. What is tree shaking in javascript ?
// 45. What is the main difference between Local Storage and Session storage
// 46. What is eval()
// 47. What is the difference between Shallow copy and deep copy
// 48. What are the difference between undeclared and undefined variables
// 49. What is event bubbling
// 50. What is event capturing
// 51. What are cookies
// 52. typeOf operator
// 53. What is this in javascript and How it behaves in various scenarios 
// 54. How do you optimize the performance of application
// 55. What is meant by debouncing and throttling



// 1. You‚Äôve given an array which contains some 0, your to write a
// function which moves all 0s to the right of the array.
// 2. You‚Äôve an array in which each adjacent number is either +1
// or -1, write a function to find the given number. Focus on
// efficiency.
// Example: [4,5,6,7,6,5,4] // Find index of 7 (from starting)
// 3. Write a function to shuffle an array.
// 4. Write a function which gives us a fibonacci sequence of a
// given number.
// 5. You have an array, which contains some bad numbers, bad
// numbers are denoted with -1, write a function to remove all
// bad numbers from the array.
// 6. Write a function to flatten a given array.
// 7. You have a string separated by a . (dot), write a function
// which converts it into an object. Last character will be added
// as a value
// Example: a.b.c.d.e output => {a : b: { c: { d: e} } }
// 8. Write a function which merges to given array.
// 9. Write a function which removes duplicates from array.
// 10. Write a function which converts a given function into curry
// version of it.
// Example function sum(a,b) {} I should be able to call it like
// this: sum(2)(2).
// 11. Given an array containing n distinct numbers taken from
// 0, 1, 2, ..., n, find the one that is missing.
// 12. Write a function which deep-clones a given object.
// 13. Write a function which deep-compares passed value.
// 14. Write a function which implements ==15. Write a function which works like a new Keyword.
// 16. Write a function which makes a chain of promise
// 17. Write a function which validates if a given set of
// parentheses are valid or not.
// 18. Implement a basic string compression algorithm. For
// example, the string "aaabbbcc" should be compressed to
// "a3b3c2".


// 1. forEach polyfill.
// 2. Map polyfill.
// 3. Filter polyfill
// 4. Reduce polyfill
// 5. Some and Every function polyfill
// 6. Push and Pop polyfill
// 7. Slice and Splice polyfill
// 8. Call Bind and Apply polyfill
// 9. Promise.all polyfill
// 10. Debounce polyfill
// 11. Throttle polyfill
// 12. JSON.stringify polyfill



//node js

// üöÄ Struggling with Node.js interviews?

// After interviewing with 10+ companies, I realized most Node.js rounds focus on core concepts + real-world scenarios ‚Äî not just textbook definitions.
// So I curated this 40-question Node.js interview list to help you crack your next round:

// ‚úÖ Core Fundamentals

// What is Node.js?

// Is Node.js single-threaded?

// What kind of API function is supported by Node.js?

// How does Node.js handle concurrency despite being single-threaded?

// What do you mean by the event loop in Node.js?

// What is REPL in Node.js?

// What is a module in Node.js?

// ‚öôÔ∏è Ecosystem & Tools
// 8. What is npm and its advantages?
// 9. What is package.json in Node.js?
// 10. What is middleware?
// 11. What are promises in Node.js?
// 12. What is callback hell & how to avoid it?
// 13. Explain body-parser in Node.js.
// 14. What is CORS in Node.js?

// üî• Advanced Concepts
// 15. What is the difference between setImmediate() vs process.nextTick()?
// 16. What is spawn() vs fork()?
// 17. What is a cluster in Node.js?
// 18. What are streams in Node.js & their types?
// 19. Explain the tls & crypto modules.
// 20. How to handle authentication & authorization in Node.js?
// 21. How to manage sessions?

// üßë‚Äçüíª Real-World Scenarios
// 22. How do you handle database connections in Node.js?
// 23. How to read command line arguments?
// 24. What packages are used for file uploads?
// 25. How do you implement retry logic or graceful shutdown?
// 26. How to scale Node.js apps in production?

// üí° Pro Tip:
// Interviewers love when you connect theory to practice. Instead of just defining ‚Äúevent loop‚Äù, explain with an example like handling async DB queries + API calls in parallel.


// 1. Implement a chain calculator.
// 2. Demonstrate prototype and prototype inheritance.
// 3. Implement call, apply, and bind methods, with Polyfills
// 4. Create custom array polyfills for map, filter, and reduce.
// 5. Flatten a nested array, using Recursion
// 6. Flatten a complex object into a single-level object.
// 7. Perform a deep clone of an object.
// 8. Implement a function to debounce a task (custom hook if React interview)
// 9. Implement a function to throttle a task (custom hook if React interview)
// 10. Write a function to merge two sorted arrays.
// 11. Execute promises in sequence.
// 12. Retry a promise N times on failure.
// 13. Implement a cancelable promise.
// 14. Implement Promise.all, Promise.race, and Promise.allSettled polyfills.
// 15. MapLimit
// 16. Write a function to convert a string from camelCase to snake_case.
// 17. Compare two documents for differences and return a structured output.
// 18. Dispatch a custom event on array push and handle it.
// 19. Implement a function to serialize and deserialize JSON data with circular references.
// 20. Build a typeahead search using an LRU cache.
// 21. Create a debouncing function with leading and trailing calls.
// 22. Build an event emitter with methods like on, off, and emit.
// 23. Implement currying for any number of arguments.
// 24. Implement a pipe and compose function.
// 25. Explain and implement deep comparison between two objects.

// JùóÆùòÉùóÆùó¶ùó∞ùóøùó∂ùóΩùòÅ ùóôùòÇùóªùó±ùóÆùó∫ùó≤ùóªùòÅùóÆùóπùòÄ:
// 1. Why do closures exist in JavaScript?
// 2. How does the event loop actually work?
// 3. What's the difference between null and undefined?
// 4. Why does this behave differently in arrow functions?
// 5. What happens when you compare objects with == vs ===?
// 6. Why can you call a function before it's declared?
// 7. What's the difference between call, apply, and bind?
// ùó•ùó≤ùóÆùó∞ùòÅ ùóúùóªùòÅùó≤ùóøùóªùóÆùóπùòÄ:
// 8. Why does React need a virtual DOM?
// 9. When does React batch state updates?
// 10. Why do we need keys in lists?
// 11. What's the difference between useEffect and useLayoutEffect?
// 12. How does React decide when to re-render?
// 13. Why might useState not update immediately?
// 14. What happens during React's reconciliation process?
// ùóîùóøùó∞ùóµùó∂ùòÅùó≤ùó∞ùòÅùòÇùóøùóÆùóπ ùóóùó≤ùó∞ùó∂ùòÄùó∂ùóºùóªùòÄ:
// 15. Why did you choose Redux over Context API?
// 16. When would you use a CDN vs hosting assets locally?
// 17. Why implement lazy loading for images?
// 18. What's the difference between SSR and CSR?
// 19. Why choose TypeScript over vanilla JavaScript?
// 20. How do you decide between REST and GraphQL?



// Recently Asked Interview Questions for Senior ReactJS Developers (7+ Years Experience)
// If you‚Äôre preparing for interviews, here are some 15 real-world questions that focus on JavaScript, React, Redux, HTML & CSS fundamentals üëá
// 1Ô∏è‚É£ Explain the difference between event loop, microtask, and macrotask in JavaScript.
//  2Ô∏è‚É£ What is the difference between deep copy vs shallow copy?
//  3Ô∏è‚É£ How does this behave in arrow functions vs normal functions?
//  4Ô∏è‚É£ Explain closures with a practical example.
//  5Ô∏è‚É£ What‚Äôs the difference between useMemo, useCallback, and React.memo?
//  6Ô∏è‚É£ How does React Fiber improve rendering performance?
//  7Ô∏è‚É£ Controlled vs Uncontrolled components ‚Äì when to use which?
//  8Ô∏è‚É£ How do you handle error boundaries in React?
//  9Ô∏è‚É£ Explain Redux Toolkit advantages over traditional Redux.
//  üîü What‚Äôs the role of middleware (Thunk vs Saga) in Redux?
//  1Ô∏è‚É£1Ô∏è‚É£ How does CSS specificity work?
//  1Ô∏è‚É£2Ô∏è‚É£ Difference between Flexbox vs Grid ‚Äì which one do you prefer for layouts?
//  1Ô∏è‚É£3Ô∏è‚É£ What are semantic HTML elements and why are they important?
//  1Ô∏è‚É£4Ô∏è‚É£ How do you optimize a React app‚Äôs performance in production?
//  1Ô∏è‚É£5Ô∏è‚É£ Explain lazy loading and code splitting in React.



// These questions are the difference between ‚Çπ6 LPA and ‚Çπ20 LPA frontend offer.

// ùóõùóßùó†ùóü
// 1. What is the difference between `id` and `class` attributes?
// 2. How does the `doctype` declaration affect a webpage?
// 3. Explain semantic HTML and its importance.
// 4. What are `meta` tags, and why are they used?
// 5. What is the difference between `span` and `div` tags?
// 6. How does the `defer` attribute in a script tag work?
// 7. What is the difference between inline, block, and inline-block elements?
// 8. How do you optimize images for web performance in HTML?
// 9. What are custom data attributes, and how are they used?
// 10. How would you create an accessible custom tooltip using only HTML?

// ùóùùóîùó©ùóîùó¶ùóñùó•ùóúùó£ùóß
// 1. What are closures, and how are they used?
// 2. Explain the difference between `var`, `let`, and `const`.
// 3. What is the event loop in JavaScript?
// 4. How does prototypal inheritance work?
// 5. What are promises, and how do they compare to async/await?
// 6. What is the difference between `==` and `===`?
// 7. Explain the concept of "hoisting" in JavaScript.
// 8. How do you handle errors in JavaScript?
// 9. What is debouncing and throttling in JavaScript?
// 10. How would you implement a deep clone of an object without using libraries?

// ùó•ùóòùóîùóñùóß
// 1. What is the virtual DOM, and how does it work?
// 2. How do React functional components differ from class components?
// 3. What are React hooks, and why are they used?
// 4. Explain the concept of lifting state up in React.
// 5. What is the purpose of `useEffect` and how is it used?
// 6. How does context API work in React?
// 7. What is the difference between controlled and uncontrolled components?
// 8. How do you optimize a React application‚Äôs performance?
// 9. What are React portals, and how are they useful?
// 10. How would you implement a custom hook to debounce user input in a React application?



// During my 2-month job hunt, I interviewed with a remote-first product company for a Senior React Developer role. The process was challenging, insightful, and full of learnings ‚Äî even though the final verdict was rejected.

// Here‚Äôs how it went:

// üéØ Round 1 (JavaScript + Problem Solving)
// üëâ Next.js Page Router basics
// üëâ Implemented a once function (runs only once)
// üëâ Wrote a curried sum function ‚Üí sum(1)(2)(3)...()
// üëâ Flattened a deeply nested object into key-value pairs

// üéØ Round 2 (System + Frontend Design)
// üëâ Built a Redux clone from scratch
// üëâ Designed a syntax highlighter (similar to regex101)
// üëâ High-level design for Reddit comments

// üéØ Round 3 (Product/Behavioral)
// üëâ Expected a product sense round, but it turned into a deep dive into my past projects
// üëâ Shared my previous work, though I wasn‚Äôt entirely sure what the interviewer was trying to evaluate

// üìå Outcome: Rejected


// üìå JavaScript‚Äã:
//  üîπWhat is the difference between var, let, and const in JavaScript? Example with scoping explain.
//  üîπWhat is hoisting in JavaScript, and how does it work? 
//  üîπWhat is Temporal Dead Zone?
//  üîπWhat is a JavaScript promise, and how does it handle asynchronous code?
//  üîπWhat is the difference between Promises and Async Await?
//  üîπWhat is destructuring in JavaScript?

// üìå React:
//  üîπDifference between class and functional components?
//  üîπWhat is props drilling? & solution.
//  üîπRedux vs Context API ‚Äì when to use what?
//  üîπPerformance optimization techniques in React?
//  üîπWhat is useReducer hook?
//  üîπWhat are Ref‚Äôs in React?
//  üîπHow do you implement routing in React?
 
// üìåCoding challenges:
//  üîπCreate a Program for increment/decrement counter?


// Here are some of the key questions I faced:

// üîπ Core JavaScript
//  Explain closures ‚Äî where do they shine in real apps?
//  How does the event loop & microtask queue (Promises vs setTimeout) work?
//  Difference between call, apply, and bind.
//  What‚Äôs the difference between var, let, and const in terms of scope & hoisting?

// üîπ Core React
//  How does React Fiber (reconciliation) work?
//  What‚Äôs the difference between controlled vs uncontrolled components?

// üîπ Hooks & State
//  When would you choose useReducer instead of useState?
//  How do you prevent unnecessary re-renders with hooks?

// üîπ Performance
//  When should you use React.memo, useMemo, or useCallback?
//  How do you optimize rendering for large lists (virtualization)?

// üîπ Data & Architecture
//  How would you architect data fetching in a large SPA?
//  When do you prefer Context vs Redux vs Zustand?

// üîπ Folder Structure & Project Organization
//  How do you organize a large React codebase for scalability?
//  Feature-based vs type-based folder structures ‚Äî what‚Äôs your approach?

// üîπ TypeScript & Testing
//  How do you type complex, generic component props in TS?
//  How do you test a component that fetches async data (unit vs integration)?

// üîπ Team & Leadership
//  How do you review React code for performance and readability?
//  How do you design a reusable component library for multiple projects?


// Q1: API call made, but nothing shows?
// üëâ Check if you used setState(response.data) not just response.

// Q2: API keeps calling again & again in useEffect?
// üëâ Add empty dependency array [].

// Q3: API takes time?
// üëâ Show a loading spinner/skeleton while waiting.

// Q4: API fails and app crashes?
// üëâ Use try...catch + show error message in UI.

// Q5: Need token in every request?
// üëâ Use Axios interceptors to attach automatically.

// Q6: API returns empty/null data?
// üëâ Show ‚ÄúNo records found‚Äù instead of blank.

// Q7: Need multiple APIs together?
// üëâ Use Promise.all([axios.get(...), axios.get(...)]).

// Q8: POST request duplicates on double click?
// üëâ Disable button while request is pending.

// Q9: Cancel API call on unmount?
// üëâ Use Axios CancelToken (or AbortController with fetch).

// Q10: Fetch data only on button click?
// üëâ Put API call inside onClick, not useEffect.


// Frontend interviews often focus on real-world problems instead of theory.
// Here are 10 simple but practical scenarios you should know üëá


// ---

// üîπ Q1. A button is clicked twice and it makes duplicate API calls. How do you fix it?
// ‚úÖ Disable button while request is running
// ‚úÖ Use debounce/throttle for clicks


// ---

// üîπ Q2. Your app looks fine on desktop but breaks on mobile screens. What‚Äôs your fix?
// ‚úÖ Use responsive CSS (Flexbox/Grid, media queries)
// ‚úÖ Test with browser DevTools (mobile view)


// ---

// üîπ Q3. A form has many inputs and state is messy. How do you handle it?
// ‚úÖ Use a form library like React Hook Form / Formik
// ‚úÖ Or manage with useReducer


// ---

// üîπ Q4. A page loads slowly because of large images. How do you fix it?
// ‚úÖ Compress images
// ‚úÖ Use loading="lazy"
// ‚úÖ Serve WebP/AVIF


// ---

// üîπ Q5. A user submits a form but API fails. What‚Äôs the best UX?
// ‚úÖ Show error message/toast
// ‚úÖ Keep input saved
// ‚úÖ Allow retry


// ---

// üîπ Q6. You render a list and React throws a key warning. What‚Äôs the fix?
// ‚úÖ Use unique id as key
// ‚úÖ Avoid using index unless no other option


// ---

// üîπ Q7. User uploads a profile pic but still sees the old image. Why?
// ‚úÖ Browser cache issue ‚Üí Add timestamp in image URL
// ‚úÖ Update local state immediately


// ---

// üîπ Q8. A modal popup opens, but clicking outside doesn‚Äôt close it. How do you fix it?
// ‚úÖ Add onClick outside handler
// ‚úÖ Provide visible close (X) button


// ---

// üîπ Q9. A button inside a form is refreshing the page unexpectedly. How do you stop it?
// ‚úÖ Add event.preventDefault()
// ‚úÖ Or set button type to "button" instead of default "submit"


// ---

// üîπ Q10. Your button text is too long and overflows on small screens. What‚Äôs your fix?
// ‚úÖ Use CSS text-overflow: ellipsis;
// ‚úÖ Add responsive styles
// ‚úÖ Use icons/short labels


// ùóùùóÆùòÉùóÆùó¶ùó∞ùóøùó∂ùóΩùòÅ ùóñùóºùóøùó≤:

// 1. Closures & Scope
// 2. Event Loop & Async
// 3. Promises & Async/Await
// 4. Hoisting & This Keyword
// 5. Prototypes & Inheritance

// ùó•ùó≤ùóÆùó∞ùòÅ ùó†ùóÆùòÄùòÅùó≤ùóøùòÜ:

// 6. useState & useEffect
// 7. Context API & useContext
// 8. Custom Hooks
// 9. Component Lifecycle
// 10. State Management (Redux/Zustand)

// ùó£ùó≤ùóøùó≥ùóºùóøùó∫ùóÆùóªùó∞ùó≤ & ùó¢ùóΩùòÅùó∂ùó∫ùó∂ùòáùóÆùòÅùó∂ùóºùóª:

// 11. Code Splitting & Lazy Loading
// 12. Memoization (useMemo, useCallback)
// 13. Virtual DOM & Reconciliation
// 14. Bundle Optimization
// 15. Web Vitals & Performance Metrics

// ùóòùòÄùòÄùó≤ùóªùòÅùó∂ùóÆùóπ ùóñùóºùóªùó∞ùó≤ùóΩùòÅùòÄ:

// 16. Event Delegation & Bubbling
// 17. Debouncing & Throttling
// 18. Error Boundaries & Error Handling
// 19. Browser Storage (localStorage, sessionStorage)
// 20. REST APIs & HTTP Methods


ùü≠. ùóõùóºùòÑ ùòÑùóºùòÇùóπùó± ùòÜùóºùòÇ ùó∂ùó∫ùóΩùóπùó≤ùó∫ùó≤ùóªùòÅ ùó∂ùóªùó≥ùó∂ùóªùó∂ùòÅùó≤ ùòÄùó∞ùóøùóºùóπùóπùó∂ùóªùó¥ ùó∂ùóª ùó•ùó≤ùóÆùó∞ùòÅ?
 - Consider the approach for triggering additional data load when the user scrolls near the end of the page or a scrollable element.
 - How would you handle throttling, debouncing, or optimization to prevent excessive requests?
 - Discuss how to manage state for pagination and loading indicators.

ùüÆ. ùóõùóºùòÑ ùòÑùóºùòÇùóπùó± ùòÜùóºùòÇ ùó∂ùó∫ùóΩùóπùó≤ùó∫ùó≤ùóªùòÅ ùóÆ ùòÄùó≤ùóÆùóøùó∞ùóµ ùó≥ùòÇùóªùó∞ùòÅùó∂ùóºùóªùóÆùóπùó∂ùòÅùòÜ ùòÑùó∂ùòÅùóµ ùóπùó∂ùòÉùó≤ ùó≥ùó∂ùóπùòÅùó≤ùóøùó∂ùóªùó¥ ùó∂ùóª ùóÆ ùó•ùó≤ùóÆùó∞ùòÅ ùóÆùóΩùóΩùóπùó∂ùó∞ùóÆùòÅùó∂ùóºùóª?
 - Describe how to optimize the filtering process for large datasets.
 - How would you debounce user input to avoid unnecessary re-renders or API calls?
 - How would you manage the filtered results state and the interaction with an API?

ùüØ. ùóõùóºùòÑ ùòÑùóºùòÇùóπùó± ùòÜùóºùòÇ ùó±ùó≤ùòÄùó∂ùó¥ùóª ùóÆùóªùó± ùó∂ùó∫ùóΩùóπùó≤ùó∫ùó≤ùóªùòÅ ùóÆ ùó≥ùóºùóøùó∫ ùòÑùó∂ùòÅùóµ ùó±ùòÜùóªùóÆùó∫ùó∂ùó∞ ùó≥ùó∂ùó≤ùóπùó±ùòÄ ùó∂ùóª ùó•ùó≤ùóÆùó∞ùòÅ?
 - How would you manage form validation, error handling, and state for dynamic inputs?
 - Would you use controlled or uncontrolled components for such a form? 
- How would you structure the form‚Äôs state for adding/removing dynamic fields?

ùü∞. ùóõùóºùòÑ ùòÑùóºùòÇùóπùó± ùòÜùóºùòÇ ùó∂ùó∫ùóΩùóπùó≤ùó∫ùó≤ùóªùòÅ ùòÄùòÅùóÆùòÅùó≤ ùó∫ùóÆùóªùóÆùó¥ùó≤ùó∫ùó≤ùóªùòÅ ùó≥ùóºùóø ùóÆ ùó∫ùòÇùóπùòÅùó∂-ùòÄùòÅùó≤ùóΩ ùó≥ùóºùóøùó∫ ùó∂ùóª ùó•ùó≤ùóÆùó∞ùòÅ?
 - How would you ensure that data entered in each step of the form is stored properly and can be accessed across steps?
 - How would you manage navigation between steps and handle errors or validation for each step?

ùü±. ùóõùóºùòÑ ùòÑùóºùòÇùóπùó± ùòÜùóºùòÇ ùó∂ùó∫ùóΩùóπùó≤ùó∫ùó≤ùóªùòÅ ùóÆ ùó∞ùòÇùòÄùòÅùóºùó∫ ùòÇùòÄùó≤ùóôùó≤ùòÅùó∞ùóµ ùóµùóºùóºùó∏ ùó∂ùóª ùó•ùó≤ùóÆùó∞ùòÅ ùó≥ùóºùóø ùóµùóÆùóªùó±ùóπùó∂ùóªùó¥ ùóõùóßùóßùó£ ùóøùó≤ùóæùòÇùó≤ùòÄùòÅùòÄ?
 - Discuss the structure of the hook for handling loading, error, and success states.
 - How would you use useEffect to trigger the API request and manage cleanup?
 - How would you ensure that the hook is reusable across different components?

ùü≤. ùóõùóºùòÑ ùòÑùóºùòÇùóπùó± ùòÜùóºùòÇ ùó∂ùó∫ùóΩùóπùó≤ùó∫ùó≤ùóªùòÅ ùóπùóÆùòáùòÜ ùóπùóºùóÆùó±ùó∂ùóªùó¥ ùóºùó≥ ùó∞ùóºùó∫ùóΩùóºùóªùó≤ùóªùòÅùòÄ ùó∂ùóª ùó•ùó≤ùóÆùó∞ùòÅ?
 - Explain how to use React.lazy and Suspense for loading components only when required.
 - How would you handle loading indicators or fallback UI during the loading process?
 - How would you manage this for multiple components or routes?

ùü¥. ùóõùóºùòÑ ùòÑùóºùòÇùóπùó± ùòÜùóºùòÇ ùó∂ùó∫ùóΩùóπùó≤ùó∫ùó≤ùóªùòÅ ùóÆ ùó±ùóøùóÆùó¥ùó¥ùóÆùóØùóπùó≤ ùóπùó∂ùòÄùòÅ ùó∂ùóª ùó•ùó≤ùóÆùó∞ùòÅ?
 - Explain how to manage the drag-and-drop state and reordering of list items.
 - What would be your approach for handling the drag events, and how would you optimize performance?

ùüµ. ùóõùóºùòÑ ùòÑùóºùòÇùóπùó± ùòÜùóºùòÇ ùó∂ùó∫ùóΩùóπùó≤ùó∫ùó≤ùóªùòÅ ùóÆùòÇùòÅùóµùó≤ùóªùòÅùó∂ùó∞ùóÆùòÅùó∂ùóºùóª ùóÆùóªùó± ùóÆùòÇùòÅùóµùóºùóøùó∂ùòáùóÆùòÅùó∂ùóºùóª ùó∂ùóª ùó•ùó≤ùóÆùó∞ùòÅ?
 - How would you protect routes that require authentication and redirect users to the login page if they‚Äôre not authenticated?
 - How would you implement token-based authentication (e.g., JWT) and handle token expiry?


Here are some of the key questions I faced:

üîπ Core JavaScript
 Explain closures ‚Äî where do they shine in real apps?
 How does the event loop & microtask queue (Promises vs setTimeout) work?
 Difference between call, apply, and bind.
 What‚Äôs the difference between var, let, and const in terms of scope & hoisting?

üîπ Core React
 How does React Fiber (reconciliation) work?
 What‚Äôs the difference between controlled vs uncontrolled components?

üîπ Hooks & State
 When would you choose useReducer instead of useState?
 How do you prevent unnecessary re-renders with hooks?

üîπ Performance
 When should you use React.memo, useMemo, or useCallback?
 How do you optimize rendering for large lists (virtualization)?

üîπ Data & Architecture
 How would you architect data fetching in a large SPA?
 When do you prefer Context vs Redux vs Zustand?

üîπ Folder Structure & Project Organization
 How do you organize a large React codebase for scalability?
 Feature-based vs type-based folder structures ‚Äî what‚Äôs your approach?

üîπ TypeScript & Testing
 How do you type complex, generic component props in TS?
 How do you test a component that fetches async data (unit vs integration)?

üîπ Team & Leadership
 How do you review React code for performance and readability?
 How do you design a reusable component library for multiple projects?

