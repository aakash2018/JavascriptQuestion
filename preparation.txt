// Trapping Rain Water
// Inversion of Array
// Majority Element
// Delete a Node in Linked List in O(1)
// Median of Two Sorted Arrays
// Aggressive Cows
// LRU Cache & LFU Cache
// Check for Child Sum Property
// BFS & DFS
// Topological Sort
// Dijkstra‚Äôs Algorithm
// Knapsack DP
// Rod Cutting
// Trie Insertion, Deletion


//github link. Important  topics ->https://github.com/bittu1040/JavaScript-Coding-and-Notes/blob/master/JS-Topics/web-worker.js
//Recently, I gave multiple interviews for Senior React.js & Tech Lead roles ‚Äî here are the Top 10 most common questions I was asked.
//  These are basic-level but frequently asked in interviews üëá

// 1Ô∏è‚É£ Call, Apply, and Bind
//  Difference between them + write a polyfill.

// 2Ô∏è‚É£ Flatten Array (No Array.flat)
//  Input : [1,2,3,[4,5,6,[7,8,[10,11]]],9] 
//  Output: [1,2,3,4,5,6,7,8,10,11,9]

// 3Ô∏è‚É£ Inline 5 divs in a row without flex/margin/padding
//  (Hint: display: inline-block)

// 4Ô∏è‚É£ Find sum of numbers without for loop
//  Input: [1,2,3,4,5] ‚Äî (Hint: reduce() or recursion)

// 5Ô∏è‚É£ Deep Copy vs Shallow Copy (How to achieve this)
//  const a = { ab: { cd: { ef: true } } };
//  const b = a; const c = { ...a };
//  console.log(a === b); console.log(a === c);
//  a.ab.cd.ef = false;
//  console.log(b.ab.cd.ef); console.log(c.ab.cd.ef); 

// 6Ô∏è‚É£ Promise & Async/Await Output (More questions I will be posting later) 
//  async function chart(v){ 
//  console.log("start", v); 
//  await console.log("middle", v); 
//  console.log("end", v);
//  }
//  chart("first"); 
//  chart("second");

// 7Ô∏è‚É£ Find first repeating character
//  Example: "success" ‚Üí c

// 8Ô∏è‚É£ Implement a Stopwatch
//  Start, Stop, Reset + live display.

// 9Ô∏è‚É£ Build a To-Do List (Vanilla JS or React)
//  Follow-up: How would you optimize re-renders?

// üîü Currying Function for Infinite Sum.
//  sum(10)(20)(30)() Output => 60
//  sum(10)(20)(30)(40)(50)(60)() Output => 210

// üí° I‚Äôll be posting more such questions soon. 
// Link for next post (More questions): https://lnkd.in/gVfm5yqa

// hashtag#ReactJS hashtag#JavaScript hashtag#WebDevelopment hashtag#InterviewPrep hashtag#CareerGrowth2025

// In a Javascript L1 & L2 round the following questions can be asked from interviewer.

// 1. What is the difference between 'Pass by Value' and 'Pass by Reference'?
// 2. What is the difference between map and filter ?
// 3. What is the difference between map() and forEach() 
// 4. What is the difference between Pure and Impure functions?
// 5. What is the difference between for-in and for-of ?
// 6. What are the differences between call(), apply() and bind() ?
// 7. List out some key features of ES6 ?
// 8. What‚Äôs the spread operator in javascript ?
// 9. What is rest operator in javascript ?
// 10. What are DRY, KISS, YAGNI, SOLID Principles ?
// 11. What is temporal dead zone ?
// 12. Different ways to create object in javascript ?
// 13. Whats the difference between Object.keys,values and entries
// 14. Whats the difference between Object.freeze() vs Object.seal()
// 15. What is a polyfill in javascript ?
// 16. What is generator function in javascript ?
// 17. What is prototype in javascript ?
// 18. What is IIFE ?
// 19. What is CORS ?
// 20. What are the different datatypes in javascript ?
// 21. What are the difference between typescript and javascript ?
// 22. What is authentication vs authorization ?
// 23. Difference between null and undefined ?
// 24. What is the output of 3+2+‚Äù7‚Äù ?
// 25. Slice vs Splice in javascript ?
// 26. What is destructuring ?
// 27. What is setTimeOut in javascript ?
// 28. What is setInterval in javascript ?
// 29. What are Promises in javascript ?
// 30. What is a callstack in javascript ?
// 31. What is a closure ?
// 32. What are callbacks in javascript ?
// 33. What are Higher Order Functions in javascript ?
// 34. What is the difference between == and === in javascript ?
// 35. Is javascript a dynamically typed language or a statically typed language 
// 36. What is the difference between Indexeddb and sessionstorage ?
// 37. What are Interceptors ?
// 38. What is Hoisting ?
// 39. What are the differences let, var and const ?
// 41. Differences between Promise.all, allSettled, any, race ?
// 42. What are limitations of arrow functions?
// 43. What is difference between find vs findIndex ?
// 44. What is tree shaking in javascript ?
// 45. What is the main difference between Local Storage and Session storage
// 46. What is eval()
// 47. What is the difference between Shallow copy and deep copy
// 48. What are the difference between undeclared and undefined variables
// 49. What is event bubbling
// 50. What is event capturing
// 51. What are cookies
// 52. typeOf operator
// 53. What is this in javascript and How it behaves in various scenarios 
// 54. How do you optimize the performance of application
// 55. What is meant by debouncing and throttling



// 1. You‚Äôve given an array which contains some 0, your to write a
// function which moves all 0s to the right of the array.
// 2. You‚Äôve an array in which each adjacent number is either +1
// or -1, write a function to find the given number. Focus on
// efficiency.
// Example: [4,5,6,7,6,5,4] // Find index of 7 (from starting)
// 3. Write a function to shuffle an array.
// 4. Write a function which gives us a fibonacci sequence of a
// given number.
// 5. You have an array, which contains some bad numbers, bad
// numbers are denoted with -1, write a function to remove all
// bad numbers from the array.
// 6. Write a function to flatten a given array.
// 7. You have a string separated by a . (dot), write a function
// which converts it into an object. Last character will be added
// as a value
// Example: a.b.c.d.e output => {a : b: { c: { d: e} } }
// 8. Write a function which merges to given array.
// 9. Write a function which removes duplicates from array.
// 10. Write a function which converts a given function into curry
// version of it.
// Example function sum(a,b) {} I should be able to call it like
// this: sum(2)(2).
// 11. Given an array containing n distinct numbers taken from
// 0, 1, 2, ..., n, find the one that is missing.
// 12. Write a function which deep-clones a given object.
// 13. Write a function which deep-compares passed value.
// 14. Write a function which implements ==15. Write a function which works like a new Keyword.
// 16. Write a function which makes a chain of promise
// 17. Write a function which validates if a given set of
// parentheses are valid or not.
// 18. Implement a basic string compression algorithm. For
// example, the string "aaabbbcc" should be compressed to
// "a3b3c2".


// 1. forEach polyfill.
// 2. Map polyfill.
// 3. Filter polyfill
// 4. Reduce polyfill
// 5. Some and Every function polyfill
// 6. Push and Pop polyfill
// 7. Slice and Splice polyfill
// 8. Call Bind and Apply polyfill
// 9. Promise.all polyfill
// 10. Debounce polyfill
// 11. Throttle polyfill
// 12. JSON.stringify polyfill



//node js

// üöÄ Struggling with Node.js interviews?

// After interviewing with 10+ companies, I realized most Node.js rounds focus on core concepts + real-world scenarios ‚Äî not just textbook definitions.
// So I curated this 40-question Node.js interview list to help you crack your next round:

// ‚úÖ Core Fundamentals

// What is Node.js?

// Is Node.js single-threaded?

// What kind of API function is supported by Node.js?

// How does Node.js handle concurrency despite being single-threaded?

// What do you mean by the event loop in Node.js?

// What is REPL in Node.js?

// What is a module in Node.js?

// ‚öôÔ∏è Ecosystem & Tools
// 8. What is npm and its advantages?
// 9. What is package.json in Node.js?
// 10. What is middleware?
// 11. What are promises in Node.js?
// 12. What is callback hell & how to avoid it?
// 13. Explain body-parser in Node.js.
// 14. What is CORS in Node.js?

// üî• Advanced Concepts
// 15. What is the difference between setImmediate() vs process.nextTick()?
// 16. What is spawn() vs fork()?
// 17. What is a cluster in Node.js?
// 18. What are streams in Node.js & their types?
// 19. Explain the tls & crypto modules.
// 20. How to handle authentication & authorization in Node.js?
// 21. How to manage sessions?

// üßë‚Äçüíª Real-World Scenarios
// 22. How do you handle database connections in Node.js?
// 23. How to read command line arguments?
// 24. What packages are used for file uploads?
// 25. How do you implement retry logic or graceful shutdown?
// 26. How to scale Node.js apps in production?

// üí° Pro Tip:
// Interviewers love when you connect theory to practice. Instead of just defining ‚Äúevent loop‚Äù, explain with an example like handling async DB queries + API calls in parallel.


// 1. Implement a chain calculator.
// 2. Demonstrate prototype and prototype inheritance.
// 3. Implement call, apply, and bind methods, with Polyfills
// 4. Create custom array polyfills for map, filter, and reduce.
// 5. Flatten a nested array, using Recursion
// 6. Flatten a complex object into a single-level object.
// 7. Perform a deep clone of an object.
// 8. Implement a function to debounce a task (custom hook if React interview)
// 9. Implement a function to throttle a task (custom hook if React interview)
// 10. Write a function to merge two sorted arrays.
// 11. Execute promises in sequence.
// 12. Retry a promise N times on failure.
// 13. Implement a cancelable promise.
// 14. Implement Promise.all, Promise.race, and Promise.allSettled polyfills.
// 15. MapLimit
// 16. Write a function to convert a string from camelCase to snake_case.
// 17. Compare two documents for differences and return a structured output.
// 18. Dispatch a custom event on array push and handle it.
// 19. Implement a function to serialize and deserialize JSON data with circular references.
// 20. Build a typeahead search using an LRU cache.
// 21. Create a debouncing function with leading and trailing calls.
// 22. Build an event emitter with methods like on, off, and emit.
// 23. Implement currying for any number of arguments.
// 24. Implement a pipe and compose function.
// 25. Explain and implement deep comparison between two objects.

// JùóÆùòÉùóÆùó¶ùó∞ùóøùó∂ùóΩùòÅ ùóôùòÇùóªùó±ùóÆùó∫ùó≤ùóªùòÅùóÆùóπùòÄ:
// 1. Why do closures exist in JavaScript?
// 2. How does the event loop actually work?
// 3. What's the difference between null and undefined?
// 4. Why does this behave differently in arrow functions?
// 5. What happens when you compare objects with == vs ===?
// 6. Why can you call a function before it's declared?
// 7. What's the difference between call, apply, and bind?
// ùó•ùó≤ùóÆùó∞ùòÅ ùóúùóªùòÅùó≤ùóøùóªùóÆùóπùòÄ:
// 8. Why does React need a virtual DOM?
// 9. When does React batch state updates?
// 10. Why do we need keys in lists?
// 11. What's the difference between useEffect and useLayoutEffect?
// 12. How does React decide when to re-render?
// 13. Why might useState not update immediately?
// 14. What happens during React's reconciliation process?
// ùóîùóøùó∞ùóµùó∂ùòÅùó≤ùó∞ùòÅùòÇùóøùóÆùóπ ùóóùó≤ùó∞ùó∂ùòÄùó∂ùóºùóªùòÄ:
// 15. Why did you choose Redux over Context API?
// 16. When would you use a CDN vs hosting assets locally?
// 17. Why implement lazy loading for images?
// 18. What's the difference between SSR and CSR?
// 19. Why choose TypeScript over vanilla JavaScript?
// 20. How do you decide between REST and GraphQL?



// Recently Asked Interview Questions for Senior ReactJS Developers (7+ Years Experience)
// If you‚Äôre preparing for interviews, here are some 15 real-world questions that focus on JavaScript, React, Redux, HTML & CSS fundamentals üëá
// 1Ô∏è‚É£ Explain the difference between event loop, microtask, and macrotask in JavaScript.
//  2Ô∏è‚É£ What is the difference between deep copy vs shallow copy?
//  3Ô∏è‚É£ How does this behave in arrow functions vs normal functions?
//  4Ô∏è‚É£ Explain closures with a practical example.
//  5Ô∏è‚É£ What‚Äôs the difference between useMemo, useCallback, and React.memo?
//  6Ô∏è‚É£ How does React Fiber improve rendering performance?
//  7Ô∏è‚É£ Controlled vs Uncontrolled components ‚Äì when to use which?
//  8Ô∏è‚É£ How do you handle error boundaries in React?
//  9Ô∏è‚É£ Explain Redux Toolkit advantages over traditional Redux.
//  üîü What‚Äôs the role of middleware (Thunk vs Saga) in Redux?
//  1Ô∏è‚É£1Ô∏è‚É£ How does CSS specificity work?
//  1Ô∏è‚É£2Ô∏è‚É£ Difference between Flexbox vs Grid ‚Äì which one do you prefer for layouts?
//  1Ô∏è‚É£3Ô∏è‚É£ What are semantic HTML elements and why are they important?
//  1Ô∏è‚É£4Ô∏è‚É£ How do you optimize a React app‚Äôs performance in production?
//  1Ô∏è‚É£5Ô∏è‚É£ Explain lazy loading and code splitting in React.



// These questions are the difference between ‚Çπ6 LPA and ‚Çπ20 LPA frontend offer.

// ùóõùóßùó†ùóü
// 1. What is the difference between `id` and `class` attributes?
// 2. How does the `doctype` declaration affect a webpage?
// 3. Explain semantic HTML and its importance.
// 4. What are `meta` tags, and why are they used?
// 5. What is the difference between `span` and `div` tags?
// 6. How does the `defer` attribute in a script tag work?
// 7. What is the difference between inline, block, and inline-block elements?
// 8. How do you optimize images for web performance in HTML?
// 9. What are custom data attributes, and how are they used?
// 10. How would you create an accessible custom tooltip using only HTML?

// ùóùùóîùó©ùóîùó¶ùóñùó•ùóúùó£ùóß
// 1. What are closures, and how are they used?
// 2. Explain the difference between `var`, `let`, and `const`.
// 3. What is the event loop in JavaScript?
// 4. How does prototypal inheritance work?
// 5. What are promises, and how do they compare to async/await?
// 6. What is the difference between `==` and `===`?
// 7. Explain the concept of "hoisting" in JavaScript.
// 8. How do you handle errors in JavaScript?
// 9. What is debouncing and throttling in JavaScript?
// 10. How would you implement a deep clone of an object without using libraries?

// ùó•ùóòùóîùóñùóß
// 1. What is the virtual DOM, and how does it work?
// 2. How do React functional components differ from class components?
// 3. What are React hooks, and why are they used?
// 4. Explain the concept of lifting state up in React.
// 5. What is the purpose of `useEffect` and how is it used?
// 6. How does context API work in React?
// 7. What is the difference between controlled and uncontrolled components?
// 8. How do you optimize a React application‚Äôs performance?
// 9. What are React portals, and how are they useful?
// 10. How would you implement a custom hook to debounce user input in a React application?



// During my 2-month job hunt, I interviewed with a remote-first product company for a Senior React Developer role. The process was challenging, insightful, and full of learnings ‚Äî even though the final verdict was rejected.

// Here‚Äôs how it went:

// üéØ Round 1 (JavaScript + Problem Solving)
// üëâ Next.js Page Router basics
// üëâ Implemented a once function (runs only once)
// üëâ Wrote a curried sum function ‚Üí sum(1)(2)(3)...()
// üëâ Flattened a deeply nested object into key-value pairs

// üéØ Round 2 (System + Frontend Design)
// üëâ Built a Redux clone from scratch
// üëâ Designed a syntax highlighter (similar to regex101)
// üëâ High-level design for Reddit comments

// üéØ Round 3 (Product/Behavioral)
// üëâ Expected a product sense round, but it turned into a deep dive into my past projects
// üëâ Shared my previous work, though I wasn‚Äôt entirely sure what the interviewer was trying to evaluate

// üìå Outcome: Rejected


// üìå JavaScript‚Äã:
//  üîπWhat is the difference between var, let, and const in JavaScript? Example with scoping explain.
//  üîπWhat is hoisting in JavaScript, and how does it work? 
//  üîπWhat is Temporal Dead Zone?
//  üîπWhat is a JavaScript promise, and how does it handle asynchronous code?
//  üîπWhat is the difference between Promises and Async Await?
//  üîπWhat is destructuring in JavaScript?

// üìå React:
//  üîπDifference between class and functional components?
//  üîπWhat is props drilling? & solution.
//  üîπRedux vs Context API ‚Äì when to use what?
//  üîπPerformance optimization techniques in React?
//  üîπWhat is useReducer hook?
//  üîπWhat are Ref‚Äôs in React?
//  üîπHow do you implement routing in React?
 
// üìåCoding challenges:
//  üîπCreate a Program for increment/decrement counter?


// Here are some of the key questions I faced:

// üîπ Core JavaScript
//  Explain closures ‚Äî where do they shine in real apps?
//  How does the event loop & microtask queue (Promises vs setTimeout) work?
//  Difference between call, apply, and bind.
//  What‚Äôs the difference between var, let, and const in terms of scope & hoisting?

// üîπ Core React
//  How does React Fiber (reconciliation) work?
//  What‚Äôs the difference between controlled vs uncontrolled components?

// üîπ Hooks & State
//  When would you choose useReducer instead of useState?
//  How do you prevent unnecessary re-renders with hooks?

// üîπ Performance
//  When should you use React.memo, useMemo, or useCallback?
//  How do you optimize rendering for large lists (virtualization)?

// üîπ Data & Architecture
//  How would you architect data fetching in a large SPA?
//  When do you prefer Context vs Redux vs Zustand?

// üîπ Folder Structure & Project Organization
//  How do you organize a large React codebase for scalability?
//  Feature-based vs type-based folder structures ‚Äî what‚Äôs your approach?

// üîπ TypeScript & Testing
//  How do you type complex, generic component props in TS?
//  How do you test a component that fetches async data (unit vs integration)?

// üîπ Team & Leadership
//  How do you review React code for performance and readability?
//  How do you design a reusable component library for multiple projects?


// Q1: API call made, but nothing shows?
// üëâ Check if you used setState(response.data) not just response.

// Q2: API keeps calling again & again in useEffect?
// üëâ Add empty dependency array [].

// Q3: API takes time?
// üëâ Show a loading spinner/skeleton while waiting.

// Q4: API fails and app crashes?
// üëâ Use try...catch + show error message in UI.

// Q5: Need token in every request?
// üëâ Use Axios interceptors to attach automatically.

// Q6: API returns empty/null data?
// üëâ Show ‚ÄúNo records found‚Äù instead of blank.

// Q7: Need multiple APIs together?
// üëâ Use Promise.all([axios.get(...), axios.get(...)]).

// Q8: POST request duplicates on double click?
// üëâ Disable button while request is pending.

// Q9: Cancel API call on unmount?
// üëâ Use Axios CancelToken (or AbortController with fetch).

// Q10: Fetch data only on button click?
// üëâ Put API call inside onClick, not useEffect.


// Frontend interviews often focus on real-world problems instead of theory.
// Here are 10 simple but practical scenarios you should know üëá


// ---

// üîπ Q1. A button is clicked twice and it makes duplicate API calls. How do you fix it?
// ‚úÖ Disable button while request is running
// ‚úÖ Use debounce/throttle for clicks


// ---

// üîπ Q2. Your app looks fine on desktop but breaks on mobile screens. What‚Äôs your fix?
// ‚úÖ Use responsive CSS (Flexbox/Grid, media queries)
// ‚úÖ Test with browser DevTools (mobile view)


// ---

// üîπ Q3. A form has many inputs and state is messy. How do you handle it?
// ‚úÖ Use a form library like React Hook Form / Formik
// ‚úÖ Or manage with useReducer


// ---

// üîπ Q4. A page loads slowly because of large images. How do you fix it?
// ‚úÖ Compress images
// ‚úÖ Use loading="lazy"
// ‚úÖ Serve WebP/AVIF


// ---

// üîπ Q5. A user submits a form but API fails. What‚Äôs the best UX?
// ‚úÖ Show error message/toast
// ‚úÖ Keep input saved
// ‚úÖ Allow retry


// ---

// üîπ Q6. You render a list and React throws a key warning. What‚Äôs the fix?
// ‚úÖ Use unique id as key
// ‚úÖ Avoid using index unless no other option


// ---

// üîπ Q7. User uploads a profile pic but still sees the old image. Why?
// ‚úÖ Browser cache issue ‚Üí Add timestamp in image URL
// ‚úÖ Update local state immediately


// ---

// üîπ Q8. A modal popup opens, but clicking outside doesn‚Äôt close it. How do you fix it?
// ‚úÖ Add onClick outside handler
// ‚úÖ Provide visible close (X) button


// ---

// üîπ Q9. A button inside a form is refreshing the page unexpectedly. How do you stop it?
// ‚úÖ Add event.preventDefault()
// ‚úÖ Or set button type to "button" instead of default "submit"


// ---

// üîπ Q10. Your button text is too long and overflows on small screens. What‚Äôs your fix?
// ‚úÖ Use CSS text-overflow: ellipsis;
// ‚úÖ Add responsive styles
// ‚úÖ Use icons/short labels


// ùóùùóÆùòÉùóÆùó¶ùó∞ùóøùó∂ùóΩùòÅ ùóñùóºùóøùó≤:

// 1. Closures & Scope
// 2. Event Loop & Async
// 3. Promises & Async/Await
// 4. Hoisting & This Keyword
// 5. Prototypes & Inheritance

// ùó•ùó≤ùóÆùó∞ùòÅ ùó†ùóÆùòÄùòÅùó≤ùóøùòÜ:

// 6. useState & useEffect
// 7. Context API & useContext
// 8. Custom Hooks
// 9. Component Lifecycle
// 10. State Management (Redux/Zustand)

// ùó£ùó≤ùóøùó≥ùóºùóøùó∫ùóÆùóªùó∞ùó≤ & ùó¢ùóΩùòÅùó∂ùó∫ùó∂ùòáùóÆùòÅùó∂ùóºùóª:

// 11. Code Splitting & Lazy Loading
// 12. Memoization (useMemo, useCallback)
// 13. Virtual DOM & Reconciliation
// 14. Bundle Optimization
// 15. Web Vitals & Performance Metrics

// ùóòùòÄùòÄùó≤ùóªùòÅùó∂ùóÆùóπ ùóñùóºùóªùó∞ùó≤ùóΩùòÅùòÄ:

// 16. Event Delegation & Bubbling
// 17. Debouncing & Throttling
// 18. Error Boundaries & Error Handling
// 19. Browser Storage (localStorage, sessionStorage)
// 20. REST APIs & HTTP Methods


ùü≠. ùóõùóºùòÑ ùòÑùóºùòÇùóπùó± ùòÜùóºùòÇ ùó∂ùó∫ùóΩùóπùó≤ùó∫ùó≤ùóªùòÅ ùó∂ùóªùó≥ùó∂ùóªùó∂ùòÅùó≤ ùòÄùó∞ùóøùóºùóπùóπùó∂ùóªùó¥ ùó∂ùóª ùó•ùó≤ùóÆùó∞ùòÅ?
 - Consider the approach for triggering additional data load when the user scrolls near the end of the page or a scrollable element.
 - How would you handle throttling, debouncing, or optimization to prevent excessive requests?
 - Discuss how to manage state for pagination and loading indicators.

ùüÆ. ùóõùóºùòÑ ùòÑùóºùòÇùóπùó± ùòÜùóºùòÇ ùó∂ùó∫ùóΩùóπùó≤ùó∫ùó≤ùóªùòÅ ùóÆ ùòÄùó≤ùóÆùóøùó∞ùóµ ùó≥ùòÇùóªùó∞ùòÅùó∂ùóºùóªùóÆùóπùó∂ùòÅùòÜ ùòÑùó∂ùòÅùóµ ùóπùó∂ùòÉùó≤ ùó≥ùó∂ùóπùòÅùó≤ùóøùó∂ùóªùó¥ ùó∂ùóª ùóÆ ùó•ùó≤ùóÆùó∞ùòÅ ùóÆùóΩùóΩùóπùó∂ùó∞ùóÆùòÅùó∂ùóºùóª?
 - Describe how to optimize the filtering process for large datasets.
 - How would you debounce user input to avoid unnecessary re-renders or API calls?
 - How would you manage the filtered results state and the interaction with an API?

ùüØ. ùóõùóºùòÑ ùòÑùóºùòÇùóπùó± ùòÜùóºùòÇ ùó±ùó≤ùòÄùó∂ùó¥ùóª ùóÆùóªùó± ùó∂ùó∫ùóΩùóπùó≤ùó∫ùó≤ùóªùòÅ ùóÆ ùó≥ùóºùóøùó∫ ùòÑùó∂ùòÅùóµ ùó±ùòÜùóªùóÆùó∫ùó∂ùó∞ ùó≥ùó∂ùó≤ùóπùó±ùòÄ ùó∂ùóª ùó•ùó≤ùóÆùó∞ùòÅ?
 - How would you manage form validation, error handling, and state for dynamic inputs?
 - Would you use controlled or uncontrolled components for such a form? 
- How would you structure the form‚Äôs state for adding/removing dynamic fields?

ùü∞. ùóõùóºùòÑ ùòÑùóºùòÇùóπùó± ùòÜùóºùòÇ ùó∂ùó∫ùóΩùóπùó≤ùó∫ùó≤ùóªùòÅ ùòÄùòÅùóÆùòÅùó≤ ùó∫ùóÆùóªùóÆùó¥ùó≤ùó∫ùó≤ùóªùòÅ ùó≥ùóºùóø ùóÆ ùó∫ùòÇùóπùòÅùó∂-ùòÄùòÅùó≤ùóΩ ùó≥ùóºùóøùó∫ ùó∂ùóª ùó•ùó≤ùóÆùó∞ùòÅ?
 - How would you ensure that data entered in each step of the form is stored properly and can be accessed across steps?
 - How would you manage navigation between steps and handle errors or validation for each step?

ùü±. ùóõùóºùòÑ ùòÑùóºùòÇùóπùó± ùòÜùóºùòÇ ùó∂ùó∫ùóΩùóπùó≤ùó∫ùó≤ùóªùòÅ ùóÆ ùó∞ùòÇùòÄùòÅùóºùó∫ ùòÇùòÄùó≤ùóôùó≤ùòÅùó∞ùóµ ùóµùóºùóºùó∏ ùó∂ùóª ùó•ùó≤ùóÆùó∞ùòÅ ùó≥ùóºùóø ùóµùóÆùóªùó±ùóπùó∂ùóªùó¥ ùóõùóßùóßùó£ ùóøùó≤ùóæùòÇùó≤ùòÄùòÅùòÄ?
 - Discuss the structure of the hook for handling loading, error, and success states.
 - How would you use useEffect to trigger the API request and manage cleanup?
 - How would you ensure that the hook is reusable across different components?

ùü≤. ùóõùóºùòÑ ùòÑùóºùòÇùóπùó± ùòÜùóºùòÇ ùó∂ùó∫ùóΩùóπùó≤ùó∫ùó≤ùóªùòÅ ùóπùóÆùòáùòÜ ùóπùóºùóÆùó±ùó∂ùóªùó¥ ùóºùó≥ ùó∞ùóºùó∫ùóΩùóºùóªùó≤ùóªùòÅùòÄ ùó∂ùóª ùó•ùó≤ùóÆùó∞ùòÅ?
 - Explain how to use React.lazy and Suspense for loading components only when required.
 - How would you handle loading indicators or fallback UI during the loading process?
 - How would you manage this for multiple components or routes?

ùü¥. ùóõùóºùòÑ ùòÑùóºùòÇùóπùó± ùòÜùóºùòÇ ùó∂ùó∫ùóΩùóπùó≤ùó∫ùó≤ùóªùòÅ ùóÆ ùó±ùóøùóÆùó¥ùó¥ùóÆùóØùóπùó≤ ùóπùó∂ùòÄùòÅ ùó∂ùóª ùó•ùó≤ùóÆùó∞ùòÅ?
 - Explain how to manage the drag-and-drop state and reordering of list items.
 - What would be your approach for handling the drag events, and how would you optimize performance?

ùüµ. ùóõùóºùòÑ ùòÑùóºùòÇùóπùó± ùòÜùóºùòÇ ùó∂ùó∫ùóΩùóπùó≤ùó∫ùó≤ùóªùòÅ ùóÆùòÇùòÅùóµùó≤ùóªùòÅùó∂ùó∞ùóÆùòÅùó∂ùóºùóª ùóÆùóªùó± ùóÆùòÇùòÅùóµùóºùóøùó∂ùòáùóÆùòÅùó∂ùóºùóª ùó∂ùóª ùó•ùó≤ùóÆùó∞ùòÅ?
 - How would you protect routes that require authentication and redirect users to the login page if they‚Äôre not authenticated?
 - How would you implement token-based authentication (e.g., JWT) and handle token expiry?


Here are some of the key questions I faced:

üîπ Core JavaScript
 Explain closures ‚Äî where do they shine in real apps?
 How does the event loop & microtask queue (Promises vs setTimeout) work?
 Difference between call, apply, and bind.
 What‚Äôs the difference between var, let, and const in terms of scope & hoisting?

üîπ Core React
 How does React Fiber (reconciliation) work?
 What‚Äôs the difference between controlled vs uncontrolled components?

üîπ Hooks & State
 When would you choose useReducer instead of useState?
 How do you prevent unnecessary re-renders with hooks?

üîπ Performance
 When should you use React.memo, useMemo, or useCallback?
 How do you optimize rendering for large lists (virtualization)?

üîπ Data & Architecture
 How would you architect data fetching in a large SPA?
 When do you prefer Context vs Redux vs Zustand?

üîπ Folder Structure & Project Organization
 How do you organize a large React codebase for scalability?
 Feature-based vs type-based folder structures ‚Äî what‚Äôs your approach?

üîπ TypeScript & Testing
 How do you type complex, generic component props in TS?
 How do you test a component that fetches async data (unit vs integration)?

üîπ Team & Leadership
 How do you review React code for performance and readability?
 How do you design a reusable component library for multiple projects?

sep 14

 Start Simple (Easy Level)
1. Build these to get comfortable with UI basics and React syntax.
2. Basic Todo App
3. Counter with increment/decrement
4. Form component with state handling
5. Modal (open/close logic)
6. Debounced Search Bar
7. React Router (basic routing)
8. Simple Pagination
9. Login Form with validations
10. Dropdown Menu component
11. Theme toggle (Light/Dark)
Focus on clean structure, reusability, and basic hooks.

Go Deeper (Medium Level)
Here, the goal is composition + state management + real API usage.
11. Weather App (API calls)
12. Basic Chat UI
13. CRUD App with Firebase
14. Multi-step Form wizard
15. Responsive Sidebar
16. Data Table with Sort/Pagination
17. Custom Hook for Form Validation
18. CSS Grid Layout (mobile-first)
19. Image Carousel
20. Drag and Drop
21. Search Filter on List
22. Movie Search App (OMDB or TMDB API)
23. Infinite Scroll Component
24. Global State with Context API
25. File Upload UI
26. Mini Cart System
27. Sticky Header on Scroll
28. Real-time Chat with WebSockets
29. Dashboard with Charts (Chart.js / Recharts)
30. Autocomplete Input
This is where real LLD questions usually lie. Think logic, not just layout.

Advanced Engineering (Hard Level)
31. Time to think like a systems designer. These projects will challenge your architecture decisions.
32. Multi-user Todo App with Auth
33. Full-stack App (React + Node.js)
34. Real-time Collaborative Editor
35. Redux-based Scalable State
36. Basic Video Streaming UI
37. Social App UI (Posts, Likes, Comments)
38. Dashboard with Role-based Access
39. Server-Side Rendering (Next.js or custom)
40. Build your own React Router (yes, really)
41. File Manager App
42. Custom Data Grid (pagination + filters)
43. In-app Notification System
44. Turn React App into a PWA
45. Auth System with JWT
46. Payment Integration (Stripe/Razorpay)
These simulate real-world use cases you'd face in a product team.


sep 15
1. Can you explain how JavaScript handles 0.1 + 0.2 = 0.30000000000000004 internally?
2. What happens if you delete the __proto__ of an object?
3. Why does typeof NaN return "number"?
4. How would you implement a scheduler that limits concurrent async tasks to 3 at a time?
5. What‚Äôs the difference between Object.create(null) and {}?
6. If JavaScript is single-threaded, how do Web Workers and SharedArrayBuffer allow parallelism?
7. How would you detect and prevent a memory leak in a large SPA?
8. How would you polyfill event loop phases (microtasks vs macrotasks) in a mock environment?
9. Can you explain the difference between Map iteration order vs Object property iteration order?
10. What are WeakMap and WeakSet? When would you use them?
11. Can you explain how tree-shaking works in modern bundlers like Webpack?

‚ö° HTML
1. Why does placing `<‚Äãscript>` in the `<head>` without `defer` or `async` block rendering?
2. Can you explain how **parsing & tokenization of HTML** works in browsers?
3. What‚Äôs the difference between `<section>`, `<article>`, `<aside>`, and `<div>` beyond semantics?
4. Why is `<canvas>` considered stateful but `<svg>` declarative?
5. Can you explain why using `<iframe>` might impact performance & security?
6. How would you optimize **HTML parsing** for a low-end device?
7. Why should `<link rel="preload">` sometimes be preferred over `<‚Äãscript async>`?
8. Can you explain why `<picture>` with `<source>` matters for responsive images vs just CSS?
9. What‚Äôs the difference between a render-blocking resource and a non-render-blocking one?
10. Why does the browser sometimes auto-insert `<tbody>` even if you don‚Äôt write it?

‚ö° CSS
1. Why does `position: sticky;` sometimes not work as expected?
2. What‚Äôs the difference between `em`, `rem`, `vh`, `vw`, and `%` in layout recalculations?
3. How does the browser calculate specificity when multiple selectors overlap?
4. Why do `z-index` bugs often happen inside flex/grid containers?
5. Can you explain the difference between composite layers vs paint layers in CSS rendering?
6. How does `contain: content` improve performance?
7. Why can‚Äôt CSS variables (`--var`) be used in `@media` queries?
8. What‚Äôs the difference between `inline-block` and `block + float` historically?
9. How would you build a CSS-only modal with no JS?
10. Why does `will-change` sometimes make performance worse instead of better?



1. Reverse a String 
2. Check if a String is a Palindrome 
3. Remove Duplicates from a String 
4. Find the First Non-Repeating Character 
5. Count the Occurrences of Each Character 
6. Reverse Words in a Sentence 
7. Check if Two Strings are Anagrams 
8. Find the Longest Substring Without Repeating Characters 
9. Convert a String to an Integer (atoi Implementation) 
10. Compress a String (Run-Length Encoding) 
11. Find the Most Frequent Character 
12. Find All Substrings of a Given String 
13. Check if a String is a Rotation of Another String 
14. Remove All White Spaces from a String 
15. Check if a String is a Valid Shuffle of Two Strings 
16. Convert a String to Title Case 
17. Find the Longest Common Prefix 
18. Convert a String to a Character Array 
19. Replace Spaces with %20 (URL Encoding) 
20. Convert a Sentence into an Acronym 
21. Check if a String Contains Only Digits 
22. Find the Number of Words in a String 
23. Remove a Given Character from a String 
24. Find the Shortest Word in a String 
25. Find the Longest Palindromic Substring

üîπ React.js Interview Questions

1. Basics
Q: What are components in React?
 A: Components are independent, reusable pieces of UI. They can be functional or class-based.
Q: What is JSX?
 A: JSX is a syntax extension for JavaScript that looks like HTML and is used to describe UI elements in React. It is transpiled into React.createElement.
2. State & Props
Q: Difference between state and props?
 A:
State ‚Üí managed inside a component, mutable.
Props ‚Üí passed from parent, read-only.
Q: Can you modify props inside a component?
 A: No, props are immutable. Only the parent can update them.
3. Hooks
Q: What does useEffect do?
 A: Handles side effects (API calls, subscriptions, timers) in functional components.
Q: Difference between useMemo and useCallback?
 A:
useMemo ‚Üí caches computed values.
useCallback ‚Üí caches function references.
4. Performance
Q: How do you prevent unnecessary re-renders?
 A:
Use React.memo for components.
Use useCallback and useMemo.
Key lists properly.
Q: What is code splitting in React?
 A: Breaking bundles into smaller chunks (via React.lazy & Suspense) for faster load time.
5. Advanced
Q: What are controlled vs uncontrolled components?
 A:
Controlled ‚Üí form inputs managed by React state.
Uncontrolled ‚Üí managed by the DOM (using ref).
Q: How does React Fiber differ from older versions?
 A: React Fiber introduced incremental rendering and better scheduling for smoother UI updates.

üîπ JavaScript Interview Questions
1. Core Concepts
Q: What is the difference between let, var, and const?
 A:
var ‚Üí function-scoped, hoisted.
let ‚Üí block-scoped, not hoisted.
const ‚Üí block-scoped, cannot be reassigned.
Q: Explain event delegation.
 A: Attaching a single event listener to a parent element that handles events from its children via event bubbling.
2. Async
Q: Difference between callbacks, promises, and async/await?
 A:
Callbacks ‚Üí nested, harder to manage (callback hell).
Promises ‚Üí better handling, .then & .catch.
Async/Await ‚Üí syntactic sugar over promises, cleaner code.
Q: What is the event loop?
 A: A mechanism that handles async operations in JS by pushing callbacks from the task queue to the call stack.
3. Objects & Functions
Q: Difference between shallow copy and deep copy?
 A:
Shallow copy ‚Üí copies only references (e.g., Object.assign, spread operator).
Deep copy ‚Üí copies nested objects too (e.g., structuredClone).
Q: Explain call, apply, and bind.
 A:
call ‚Üí invoke with arguments individually.
apply ‚Üí invoke with arguments as an array.
bind ‚Üí returns a new function with fixed this.


üîπ Top 30 Node.js Interview Questions

Basics (1‚Äì10)
 1. What is Node.js and how is it different from traditional web servers?
 2. Why is Node.js single-threaded, and how does it handle concurrency?
 3. Explain the event loop in Node.js.
 4. What are callbacks in Node.js? What problems do they cause?
 5. Difference between setImmediate(), process.nextTick(), and setTimeout().
 6. What are Streams in Node.js? Types of streams?
 7. Explain the concept of middleware in Node.js.
 8. Difference between synchronous and asynchronous functions in Node.js.
 9. What is require() in Node.js and how does module caching work?
 10. Explain CommonJS vs ES Modules in Node.js.

Intermediate (11‚Äì20)
 11. What are Promises and async/await in Node.js?
 12. How do you handle errors in asynchronous code?
 13. What are process objects in Node.js?
 14. Explain the difference between spawn, exec, and fork in Node.js.
 15. What is an EventEmitter in Node.js? Give a real use case.
 16. How does clustering work in Node.js?
 17. Explain how you can achieve multithreading in Node.js.
 18. What is the role of libuv in Node.js?
 19. How do you handle uncaught exceptions in Node.js?
 20. Explain difference between process.env and dotenv package.

Advanced (21‚Äì30)
 21. What is JWT and how is it implemented in Node.js?
 22. How do you implement authentication and authorization in Node.js?
 23. What is rate limiting and how would you implement it in Node.js?
 24. How do you secure a Node.js application from SQL Injection & XSS?
 25. Explain CORS in Node.js. How to enable it?
 26. What are worker threads in Node.js?
 27. How does garbage collection work in Node.js?
 28. How do you monitor and debug performance issues in Node.js apps?
 29. Explain the difference between process.nextTick() and queueMicrotask().
 30. If an API is slow in Node.js, how would you debug and optimize it?

‚öõÔ∏è React Interview Question: What will be the count value here?

function Counter() {
 const [count, setCount] = useState(0);

 function increment() {
 setCount(count + 1);
 setCount(count + 1);
 }

 return <button onClick‚Äã={increment}>{count}</button>;
}

üëâ After clicking once, count = 1, not 2.

‚úÖ Reason:
React batches state updates.
Both setCount(count + 1) use the same stale value of count (0).
Final update = 1.

üí° Use functional updates to fix:
setCount(c => c + 1);
setCount(c => c + 1);

Output ‚Üí 2 üéØ

sep 19 2025 frontend interview
Frontend Interview Pattern & Frequently Asked Questions üî•

Most product-based companies typically have 4-5 rounds of frontend interviews:
 1Ô∏è‚É£ JavaScript
 2Ô∏è‚É£ Machine Coding / React
 3Ô∏è‚É£ Data Structures & Algorithms (DSA)
 4Ô∏è‚É£ System Design
 5Ô∏è‚É£ Managerial Round

 JavaScript Round (45-60 min)
üçÑ Chain Calculator
üçÑ Promises in Sequence
üçÑ Pipe and Compose
üçÑ Array Polyfills (map, filter, reduce, etc.)
üçÑ Prototype and Prototype Inheritance
üçÑ Call, Apply, Bind
üçÑ Flatten Array
üçÑ Basic Debouncing
üçÑ Basic Throttling
üçÑ Event Emitter
üçÑ Debouncing with Leading and Trailing Options
üçÑ MapLimit (Controlling Concurrent Asynchronous Calls)
üçÑ Cancelable Promise
üçÑ Typeahead Search with LRU Cache
üçÑ Document Comparison
üçÑ Currying
üçÑ Execute Tasks in Parallel
üçÑ Sorting an Array 
üçÑ Object Flattening
üçÑ Deep Clone Object
üçÑ JSON.stringify vs Manual Deep Copy
üçÑ React DOM Rendering Process
üçÑ Retry Promises N Times
üçÑ Extended Version of Event Emitter
üçÑ Promise.all
üçÑ Promise.race
üçÑ Promise.any
üçÑ Promise.allSettled

Machine coding (60-90 min)
üå¥ File-folder
üå¥ Google-calender
üå¥ Infinite-scroll-virtulization
üå¥ InteractiveDiagonalGrid
üå¥ NestedCheckbox
üå¥ Tabs
üå¥ Tic-Tac-Toe
üå¥ Todo-list
üå¥ TypeAhead
üå¥ WhatsappChat

React Round (60-120 min)
üëâ Introduction to JSX
üëâ React Component
üëâ Component State and Props
üëâ Adding Style (CSS)
üëâ Functional and Class Components
üëâ React Lifecycle Methods
üëâ Virtual DOM
üëâ React Hooks
üëâ Custom Hooks
üëâ Context API
üëâ Synthetic Events
üëâ Routing
üëâ Data Flow (Redux/Flux)
üëâ Server-Side Rendering
üëâ Unit Testing
üëâ Jest & React Testing Library
üëâ Mocking Data
üëâ Understanding Webpack (Bundler)
üëâ Babel, env, Prettier, Linter

React.js ‚Äì Must-Know Topics (2025 Edition)

If you are preparing for React.js or want to revise important concepts, here‚Äôs a comprehensive checklist of topics you must go through:

‚úÖ Basics & Core Concepts

What is React? Features of React
Virtual DOM vs Real DOM
Reconciliation Algorithm & React Fiber
Difference between Class & Functional Components
Stateless vs Stateful Components

‚úÖ Components & Rendering

Lifecycle Methods in Class Components
Controlled vs Uncontrolled Components
Keys in React & why they are important
React Portals
Higher Order Components (HOC)
Render Props vs HOCs vs Custom Hooks

‚úÖ Hooks (React 16+ & React 18)

useState, useEffect, useContext, useReducer, useRef
useCallback, useMemo, useImperativeHandle
Custom Hooks
React.memo vs PureComponent
React 18 Hooks ‚Üí useTransition, useDeferredValue, useId

‚úÖ State Management & Context

Context API vs Redux
Lifting Up State
Error Boundaries
Strict Mode in React

‚úÖ Performance & Optimization

Lazy Loading in React.js
Code Splitting & Dynamic Imports
Tree Shaking for bundle size optimization
Memory Leaks in React and how to avoid them
Event Delegation in React Synthetic Events
Difference between useEffect and useLayoutEffect

‚úÖ Advanced Topics

Hydration (SSR + CSR merging)
React Fiber & how Diffing works internally

1Ô∏è‚É£ Reverse a String (basic foundation)
2Ô∏è‚É£ Check if a String is a Palindrome (two-pointer / reversal logic)
3Ô∏è‚É£ Remove Duplicates from a String (set / hashing use)
4Ô∏è‚É£ Find the First Non-Repeating Character (hashmap pattern)
5Ô∏è‚É£ Check if Two Strings are Anagrams (sorting / frequency counting)
6Ô∏è‚É£ Find the Longest Substring Without Repeating Characters (sliding window)
7Ô∏è‚É£ Replace Spaces with %20 (URL Encoding) (practical interview classic)
8Ô∏è‚É£ Compress a String ‚Äì Run-Length Encoding (two-pointer / counting pattern)
9Ô∏è‚É£ Find the Longest Palindromic Substring (expand around center / DP)
üîü Find the Longest Common Prefix (interview classic)


üü¢ 1. React Fundamentals
1Ô∏è‚É£ What is React?
 2Ô∏è‚É£ What are the key features of React?
 3Ô∏è‚É£ What is JSX?
 4Ô∏è‚É£ What is the DOM?
 5Ô∏è‚É£ What is Virtual DOM?
 6Ô∏è‚É£ What are props in React?
 7Ô∏è‚É£ What is state in ReactJS?
 8Ô∏è‚É£ What is the difference between props and state?
 9Ô∏è‚É£ What is prop drilling?
 üîü How to avoid prop drilling?

üîµ 2. Component System & Lifecycle

1Ô∏è‚É£1Ô∏è‚É£ What is the component lifecycle in React class components?
 1Ô∏è‚É£2Ô∏è‚É£ What are Pure components in React?
 1Ô∏è‚É£3Ô∏è‚É£ What are fragments in React?
 1Ô∏è‚É£4Ô∏è‚É£ What are Refs in React?
 1Ô∏è‚É£5Ô∏è‚É£ What is forwardRef?
 1Ô∏è‚É£6Ô∏è‚É£ What are Error Boundaries?
 1Ô∏è‚É£7Ô∏è‚É£ What are Higher Order Components (HOCs)?
 1Ô∏è‚É£8Ô∏è‚É£ What are Portals in React?
 1Ô∏è‚É£9Ô∏è‚É£ What is Strict Mode in React?

üü† 3. Hooks Deep Dive

2Ô∏è‚É£0Ô∏è‚É£ What is useState and when to use it?
 2Ô∏è‚É£1Ô∏è‚É£ What is useReducer and when to use it over useState?
 2Ô∏è‚É£2Ô∏è‚É£ What is useEffect and which class lifecycle methods does it replace?
 2Ô∏è‚É£3Ô∏è‚É£ What is useMemo?
 2Ô∏è‚É£4Ô∏è‚É£ What is useCallback?
 2Ô∏è‚É£5Ô∏è‚É£ Difference between useMemo and useCallback?
 2Ô∏è‚É£6Ô∏è‚É£ What are custom hooks?
 2Ô∏è‚É£7Ô∏è‚É£ What are the different hooks you‚Äôve used?

üß† 4. Practical Coding & Usage

2Ô∏è‚É£8Ô∏è‚É£ Create a custom hook for increment/decrement counter
 2Ô∏è‚É£9Ô∏è‚É£ Practical: Use callback function to send data from child to parent
 3Ô∏è‚É£0Ô∏è‚É£ Practical: Send data from child to parent using useRef
 3Ô∏è‚É£1Ô∏è‚É£ Practical: Use Context API with a working example

üü£ 5. Data Flow, Events & Rendering
3Ô∏è‚É£2Ô∏è‚É£ What are synthetic events in React?
 3Ô∏è‚É£3Ô∏è‚É£ What are controlled vs uncontrolled components?
 3Ô∏è‚É£4Ô∏è‚É£ What are keys in React?
 3Ô∏è‚É£5Ô∏è‚É£ What is lazy loading in React?
 3Ô∏è‚É£6Ô∏è‚É£ What is Suspense in React?
 3Ô∏è‚É£7Ô∏è‚É£ What is the purpose of the callback function inside setState()?
 3Ô∏è‚É£8Ô∏è‚É£ Different ways to pass data from child to parent component

üü° 6. Context, Redux, and State Management

3Ô∏è‚É£9Ô∏è‚É£ What is Context API in React?
 4Ô∏è‚É£0Ô∏è‚É£ Practical: Example usage of Context API
 4Ô∏è‚É£1Ô∏è‚É£ Context API vs Redux ‚Äî when to use what?
 4Ô∏è‚É£2Ô∏è‚É£ What are prop types? How to apply validation on props?

üî¥ 7. Performance & Patterns

4Ô∏è‚É£3Ô∏è‚É£ How do you optimize a React application?
 4Ô∏è‚É£4Ô∏è‚É£ How do you consume a RESTful JSON API in ReactJS?
 4Ô∏è‚É£5Ô∏è‚É£ What are different design patterns used in React?
 4Ô∏è‚É£6Ô∏è‚É£ What are React Mixins?
 4Ô∏è‚É£7Ô∏è‚É£ What are render props in React?
 4Ô∏è‚É£8Ô∏è‚É£ What is the difference between React.createElement and React.cloneElement?
 4Ô∏è‚É£9Ô∏è‚É£ What are the different types of exports and imports in React?
 5Ô∏è‚É£0Ô∏è‚É£ What are protected routes in React?
 5Ô∏è‚É£1Ô∏è‚É£ Does React Router support context menus?

sep 20 2025

Create Angular component which will have a progress bar. 
1 It will initiate from 0% on page load 2. 
It will increment after 1 secs by 10% 3. 
The progress bar will keep on incrementing till the width of the page is met


If I am taking your React Interview, I‚Äôm asking you these 30 questions 100%:
1. What are the limitations of React in building large-scale applications?
2. How does React manage the Virtual DOM, and what are the benefits?
3. Can React Hooks fully replace Redux for state management? Explain why or why not.
4. What are the best practices for managing state in large React applications?
5. How would you optimize performance in a React app with large component trees?
6. Explain React's Strict Mode and its impact on development.
7. How can you prevent unnecessary re-renders in React functional components?
8. Describe the key differences between functional and class components in React.
9. What is the significance of the React Fiber architecture?
10. How does React handle side effects, and how can you manage them effectively?
11. Explain the differences between `useMemo()` and `useCallback()` in React.
12. How would you implement dynamic form handling and validation in React?
13. What is lazy loading in React, and how does it improve application performance?
14. How would you handle errors in a React app, and what is the role of error boundaries?
15. What are the benefits of server-side rendering (SSR) in React applications?
16. How do you handle styling in React components? Discuss different approaches.
17. How would you pass data between sibling components in React without using Redux?
18. Explain the use case of `useEffect()` for fetching data from an API.
19. How do you handle asynchronous operations in React using `async/await` or Promises?
20. How would you re-render a component when the window is resized?
21. Describe how React Context API can be used for state management in an app.
22. What is the role of React Router, and how does it work with dynamic routing?
23. Explain the concept of controlled and uncontrolled components in React.
24. How would you optimize React app performance when handling large lists or grids?
25. Explain the difference between shallow and deep comparison in React's `shouldComponentUpdate`.
26. How do you handle asynchronous code execution and state updates in React?
27. How would you implement custom hooks to abstract logic in React?
28. What are higher-order components (HOCs) in React, and how are they used?
29. How would you implement a search feature with debouncing in React?
30. Explain React's reconciliation process and how it updates the DOM efficiently.

sep222025
Recently Asked Interview Questions for Senior ReactJS Developers (7+ Years Experience)
If you‚Äôre preparing for interviews, here are some 15 real-world questions that focus on JavaScript, React, Redux, HTML & CSS fundamentals üëá
1Ô∏è‚É£ Explain the difference between event loop, microtask, and macrotask in JavaScript.
 2Ô∏è‚É£ What is the difference between deep copy vs shallow copy?
 3Ô∏è‚É£ How does this behave in arrow functions vs normal functions?
 4Ô∏è‚É£ Explain closures with a practical example.
 5Ô∏è‚É£ What‚Äôs the difference between useMemo, useCallback, and React.memo?
 6Ô∏è‚É£ How does React Fiber improve rendering performance?
 7Ô∏è‚É£ Controlled vs Uncontrolled components ‚Äì when to use which?
 8Ô∏è‚É£ How do you handle error boundaries in React?
 9Ô∏è‚É£ Explain Redux Toolkit advantages over traditional Redux.
 üîü What‚Äôs the role of middleware (Thunk vs Saga) in Redux?
 1Ô∏è‚É£1Ô∏è‚É£ How does CSS specificity work?
 1Ô∏è‚É£2Ô∏è‚É£ Difference between Flexbox vs Grid ‚Äì which one do you prefer for layouts?
 1Ô∏è‚É£3Ô∏è‚É£ What are semantic HTML elements and why are they important?
 1Ô∏è‚É£4Ô∏è‚É£ How do you optimize a React app‚Äôs performance in production?
 1Ô∏è‚É£5Ô∏è‚É£ Explain lazy loading and code splitting in React.
‚ú® Takeaway: For senior roles, interviews go deep into JavaScript internals, React architecture, and scalable UI practices ‚Äì not just syntax.

ùü≠. ùóõùóºùòÑ ùòÑùóºùòÇùóπùó± ùòÜùóºùòÇ ùó∂ùó∫ùóΩùóπùó≤ùó∫ùó≤ùóªùòÅ ùó∂ùóªùó≥ùó∂ùóªùó∂ùòÅùó≤ ùòÄùó∞ùóøùóºùóπùóπùó∂ùóªùó¥ ùó∂ùóª ùó•ùó≤ùóÆùó∞ùòÅ?
 - How would you handle throttling, debouncing, or optimization to prevent excessive requests?

ùüÆ. ùóõùóºùòÑ ùòÑùóºùòÇùóπùó± ùòÜùóºùòÇ ùó∂ùó∫ùóΩùóπùó≤ùó∫ùó≤ùóªùòÅ ùóÆ ùòÄùó≤ùóÆùóøùó∞ùóµ ùó≥ùòÇùóªùó∞ùòÅùó∂ùóºùóªùóÆùóπùó∂ùòÅùòÜ ùòÑùó∂ùòÅùóµ ùóπùó∂ùòÉùó≤ ùó≥ùó∂ùóπùòÅùó≤ùóøùó∂ùóªùó¥ ùó∂ùóª ùóÆ ùó•ùó≤ùóÆùó∞ùòÅ ùóÆùóΩùóΩùóπùó∂ùó∞ùóÆùòÅùó∂ùóºùóª?
 - How would you debounce user input to avoid unnecessary re-renders or API calls?
 - How would you manage the filtered results state and the interaction with an API?

ùüØ. ùóõùóºùòÑ ùòÑùóºùòÇùóπùó± ùòÜùóºùòÇ ùó±ùó≤ùòÄùó∂ùó¥ùóª ùóÆùóªùó± ùó∂ùó∫ùóΩùóπùó≤ùó∫ùó≤ùóªùòÅ ùóÆ ùó≥ùóºùóøùó∫ ùòÑùó∂ùòÅùóµ ùó±ùòÜùóªùóÆùó∫ùó∂ùó∞ ùó≥ùó∂ùó≤ùóπùó±ùòÄ ùó∂ùóª ùó•ùó≤ùóÆùó∞ùòÅ?
 - How would you manage form validation, error handling, and state for dynamic inputs?
 - Would you use controlled or uncontrolled components for such a form?

ùü∞. ùóõùóºùòÑ ùòÑùóºùòÇùóπùó± ùòÜùóºùòÇ ùó∂ùó∫ùóΩùóπùó≤ùó∫ùó≤ùóªùòÅ ùòÄùòÅùóÆùòÅùó≤ ùó∫ùóÆùóªùóÆùó¥ùó≤ùó∫ùó≤ùóªùòÅ ùó≥ùóºùóø ùóÆ ùó∫ùòÇùóπùòÅùó∂-ùòÄùòÅùó≤ùóΩ ùó≥ùóºùóøùó∫ ùó∂ùóª ùó•ùó≤ùóÆùó∞ùòÅ?
 - How would you ensure that data entered in each step of the form is stored properly and can be accessed across steps?
 - How would you manage navigation between steps and handle errors or validation for each step?

ùü±. ùóõùóºùòÑ ùòÑùóºùòÇùóπùó± ùòÜùóºùòÇ ùó∞ùóøùó≤ùóÆùòÅùó≤ ùóÆ ùóøùó≤ùóÆùóπ-ùòÅùó∂ùó∫ùó≤ ùóªùóºùòÅùó∂ùó≥ùó∂ùó∞ùóÆùòÅùó∂ùóºùóª ùòÄùòÜùòÄùòÅùó≤ùó∫ ùó∂ùóª ùó•ùó≤ùóÆùó∞ùòÅ?
 - How would you manage multiple notification types (success, error, warning, info)?

ùü≤. ùóõùóºùòÑ ùòÑùóºùòÇùóπùó± ùòÜùóºùòÇ ùó∂ùó∫ùóΩùóπùó≤ùó∫ùó≤ùóªùòÅ ùóÆ ùó±ùóøùóÆùó¥-ùóÆùóªùó±-ùó±ùóøùóºùóΩ ùó≥ùó∂ùóπùó≤ ùòÇùóΩùóπùóºùóÆùó± ùó∞ùóºùó∫ùóΩùóºùóªùó≤ùóªùòÅ ùó∂ùóª ùó•ùó≤ùóÆùó∞ùòÅ?
 - How would you handle different file types and size validation?
 - How would you manage upload state (pending, uploading, success, error) for each file?

ùü≥. ùóõùóºùòÑ ùòÑùóºùòÇùóπùó± ùòÜùóºùòÇ ùóØùòÇùó∂ùóπùó± ùóÆ ùóøùó≤ùòÇùòÄùóÆùóØùóπùó≤ ùó±ùóÆùòÅùóÆ ùòÅùóÆùóØùóπùó≤ ùó∞ùóºùó∫ùóΩùóºùóªùó≤ùóªùòÅ ùòÑùó∂ùòÅùóµ ùòÄùóºùóøùòÅùó∂ùóªùó¥, ùó≥ùó∂ùóπùòÅùó≤ùóøùó∂ùóªùó¥, ùóÆùóªùó± ùóΩùóÆùó¥ùó∂ùóªùóÆùòÅùó∂ùóºùóª?
 - How would you handle server-side vs client-side sorting and filtering?
 - How would you manage table state and synchronize with URL parameters?

ùü¥. ùóõùóºùòÑ ùòÑùóºùòÇùóπùó± ùòÜùóºùòÇ ùó∂ùó∫ùóΩùóπùó≤ùó∫ùó≤ùóªùòÅ ùóÆ ùó∫ùóºùó±ùóÆùóπ/ùó±ùó∂ùóÆùóπùóºùó¥ ùòÄùòÜùòÄùòÅùó≤ùó∫ ùó∂ùóª ùó•ùó≤ùóÆùó∞ùòÅ?
 - How would you handle modal stacking and z-index management?
 - How would you implement focus management and keyboard navigation for accessibility?

ùüµ. ùóõùóºùòÑ ùòÑùóºùòÇùóπùó± ùòÜùóºùòÇ ùóØùòÇùó∂ùóπùó± ùóÆ ùóøùó≤ùóÆùóπ-ùòÅùó∂ùó∫ùó≤ ùó∞ùóµùóÆùòÅ ùóÆùóΩùóΩùóπùó∂ùó∞ùóÆùòÅùó∂ùóºùóª ùòÇùòÄùó∂ùóªùó¥ ùó•ùó≤ùóÆùó∞ùòÅ?
 - How would you manage message state, user presence, and typing indicators?
 - How would you implement message pagination and infinite scroll for chat history?

ùü≠ùü¨. ùóõùóºùòÑ ùòÑùóºùòÇùóπùó± ùòÜùóºùòÇ ùó∂ùó∫ùóΩùóπùó≤ùó∫ùó≤ùóªùòÅ ùóÆ ùòÉùó∂ùóøùòÅùòÇùóÆùóπùó∂ùòáùó≤ùó± ùóπùó∂ùòÄùòÅ ùó∞ùóºùó∫ùóΩùóºùóªùó≤ùóªùòÅ ùó≥ùóºùóø ùóøùó≤ùóªùó±ùó≤ùóøùó∂ùóªùó¥ ùóπùóÆùóøùó¥ùó≤ ùó±ùóÆùòÅùóÆùòÄùó≤ùòÅùòÄ?
 - How would you calculate which items should be visible based on scroll position?
 - How would you handle dynamic item heights and implement smooth scrolling?
 
1. React JS Interview Questions ( Cinema Hall Seat Booking ) - Frontend Machine Coding Interview
2. RoadsideCoder Project (https://www.youtube.com/watch?v=glAC7d-TYSM)
3. Angular important question https://github.com/bittu1040/Learn-with-Bittu/blob/master/README.md
4. https://github.com/sudheerj/javascript-interview-questions?tab=readme-ov-file#what-is-a-proper-tail-call
5. https://github.com/Mohamed-Hashem/nodejs-interview-questions
6. https://github.com/greatfrontend/top-javascript-interview-questions/tree/main?tab=readme-ov-file
7. https://github.com/aakash2018/top-javascript-interview-questions
8. https://github.com/bittu1040/JavaScript-Coding-and-Notes/blob/master/JS-Topics/setInterval.js
9. https://www.youtube.com/watch?v=xdICgllv34M&list=PL9XvIvvVL50FnksxIrR9VstHtbboZLQjA
10. https://github.com/sanchit0496/reactjs-machine-coding-challenges?tab=readme-ov-file#project-list
11. https://namastedev.com/practice?search=&sortBy=default&language=All&difficulty_level=All&status=All&companies=All&tags=reactJs%2CnodeJs&page=1
