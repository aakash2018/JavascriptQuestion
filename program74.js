// 3. Polyfill for Array.prototype.reduce()
// ЁЯСЙ Definition

// reduce() array рдХреЗ рд╕рд╛рд░реЗ elements рдХреЛ рдПрдХ рд╣реА value рдореЗрдВ reduce рдХрд░рддрд╛ рд╣реИред

// рдпреЗ рдПрдХ callback function рд▓реЗрддрд╛ рд╣реИ рдЬреЛ accumulator рдФрд░ currentValue рдкрд░ рдХрд╛рдо рдХрд░рддрд╛ рд╣реИред

// рд╕рд╛рде рдореЗрдВ рдПрдХ optional initialValue рднреА рд╣реЛрддрд╛ рд╣реИред

// ЁЯСЙ Polyfill Code

Array.prototype.myReduce = function (callback, initialValue) {
  let accumulator = initialValue;
  let startIndex = 0;

  // рдЕрдЧрд░ initialValue рдирд╣реАрдВ рджреА рдЧрдИ рд╣реИ тЖТ рдкрд╣рд▓реЗ element рдХреЛ рд╣реА accumulator рдмрдирд╛ рд▓реЛ
  if (accumulator === undefined) {
    accumulator = this[0];
    startIndex = 1;
  }

  for (let i = startIndex; i < this.length; i++) {
    accumulator = callback(accumulator, this[i], i, this);
  }

  return accumulator;
};

// ЁЯСЙ Example 1 (Sum of numbers)
let arr = [1, 2, 3, 4];

let sum = arr.myReduce((acc, curr) => acc + curr, 0);

console.log(sum); // 10

// ЁЯСЙ Example 2 (Find Max)
let nums = [5, 12, 7, 30, 15];

let max = nums.myReduce((acc, curr) => (curr > acc ? curr : acc));

console.log(max); // 30

// ЁЯСЙ Key Points

// рдЕрдЧрд░ initialValue рдирд╣реАрдВ рджрд┐рдпрд╛ рддреЛ рдкрд╣рд▓рд╛ element accumulator рдмрди рдЬрд╛рддрд╛ рд╣реИ тЬЕ

// рд╣рд░ рдмрд╛рд░ callback accumulator рдХреЛ update рдХрд░рддрд╛ рд╣реИ тЬЕ

// Final рдореЗрдВ рдПрдХ single value return рдХрд░рддрд╛ рд╣реИ тЬЕ